coord_map()+ggtitle("Population of Texas Counties")
tx+scale_fill_brewer(
palette="Blues",
name = "Population",
labels = c("0-999","1,000 - 9,999","10,000-99,999","100,000-999,999","1,000,000+"))+
xlab("")+ylab("")+theme_bw()+
coord_map()+ggtitle("Population of Texas Counties")+theme(axis.text=element_text((size=12)))
tx+scale_fill_brewer(
palette="Blues",
name = "Population",
labels = c("0-999","1,000 - 9,999","10,000-99,999","100,000-999,999","1,000,000+"))+
xlab("")+ylab("")+theme_bw()+
coord_map()+ggtitle("Population of Texas Counties")+theme(axis.text=element_text(size=12))
billboard2 = melt(billboard, id = col_idx[1:5],
variable = 'week',
value = 'rank',
measure = cols_to_be_melt,
na.rm = F)
# install ####
install.packages('rmarkdown')
install.packages('knitr')
install.packages('data.table')
install.packages('dplyr')
install.packages('tidyverse')
# library ####
library(plyr)
library(dplyr)
library(data.table)
library(zoo)
library(tidyverse)
library(reshape2)
# set up ####
#appearance vibrant
system.time({}) #assign memory to a large var can help
getwd()
setwd('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/')
dir()
if (!dir.exists('data')) {dir.create('data')} #create a new folder
source('practice1.R') #use codes from other files
rm(list = ls())
# math ####
# functions apply to vectors
c(5,10) %% 2 # remainder
5 %/% 2 # integer division
(-3)^3 #negative value in parenthese
cumsum(x),cumprod(x),cummax(x),cummin(x)
prod() #product of vector elements
#random variables ####
rnorm(10);runif(10);
qnorm(0.5); pnorm(0);qunif(c(0.5,0.1))
sample (x = c(1,2,3), size=10, replace=TRUE)
set.seed(1)
# types and manipulation ####
class (5.6)
# char ####
readr::parse_number(day) #get the number in a string
as.character(5.6); x = 5.6; x = as.character(x); class(x) #only the value of var is converts, a var has no type
nchar(), strsplit()
a=strsplit(x=xinput, split='\\ +')
unlist(a)
sort(paste0(rep(letters[1:4],2), seq(1,8)))
paste(letters[1:4],letters[5:8], collapse = '\n') #paste0 is paste with sep=''
cat(.Last.value) #print(.Last.value)
substr("letters[1:4]",1,2)
gsub(pattern = 'a',replacement = "?",x = c("aa bb aa",'bb aa')) #work on a vector
grep(pattern = 'a', x = c("aa bb aa",'bb aa'))
#create a model
mat = matrix(rnorm(120), nrow=20, ncol=6)
y=mat[,1]
df = data.frame(mat[,-1])
colnames(df) = paste0(rep(x = 'x',5),1:5)
right = paste0(rep(x = 'df$x',5),1:5,collapse = '+')
form = paste0('y~',right)
lm(y~.,data=df) #using df as Xs
# vectors ####
vec = c('ab',3) #vector is a sequence of primitive data objects of the same type
1:10
seq(1,10, by=2, length=5) # numeric vector by=increment, length=No
rep(x = c('a', 'b', 3), time= c(3, 5, 1)) #number or vector; N:times repeat; each repeats each elements N times
v = 1:15; names(v) = letters[1:6]
# matrix####
# Vector with a "dim" attributes (n=2)
mat = matrix(1:12, nrow=4, ncol=3, byrow = T)
v = 1:12; dim(v) = c(4,3) #
cbind(vec1, vec2); rbind(); # vec, mat, df
nrow(),   ncol(),   colSums(),  rowSums(), diag(), t(A), rowMeans(), %*% #matrix operation https://www.statmethods.net/advstats/matrix.html
# array: Vector with a "dim" attributes (n>2)
a = array(1:24,dim = c(3,4,2))
# DF ####
#Matrix w/ labels
data.frame(cname1=city,cname2=pop)
colnames(DF) = c('newname1','newname1'),   rownames()
str(citydf)
# apply to both mat and vector
DF[order(DF$col1,decreasing=T),] #sorting
head(DF)
df=rename(df, c('Mkt.RF' = "Mkt")) #rename columns
rename(d, c("beta"="two", "gamma"="three"))
df.columns = [] #rename all
df0 = lapply(df,  function(x){x+df$col1}) #add one columns to a df; column by column
#factors
vec1 = factor(rep(c(0,1,3), c(4,6,2)))
levels(vec1)
vec2 = factor(rep(c('b','a'), c(4,6)))
ordered(vec2, levels=c('a','b')) #order of the factor, may be used in aggregation and barplot
# operations
c(1,3,5) + 1 ; c(F,T,T) & c(T,F,T) # elementwise arithmetic/logical operations  for vec, matrix
max(mat) # aggregation apply across the entire matrix
a = matrix(1:15:,3,5)
apply(x,MARGIN = 2,function(x){x+c(1,2,3)}) #only use loops if it affects the next step
sapply(X = DF[,1:4], sd) #by column or row operations
lapply(X = DF[,1:4], sd) #returns a list
apply(X = DF[,1:4],MARGIN = 2, sd) #matrix, Margin=1 for row, Margin=2 for column
# flatten list
# slicing ####
which(c(T,F,T)) # gives the index from logical comparison
any(c(T,F,T))
#vector
x = seq(1,10,1)
x[1:length(x)] #dim(x)[1]
x[c(1, 3)]; x[seq(1, 4, by=2)]; x[c(T,F,T,T)]; x[c(-2, -4)];x[ x>=2 & x<4 ] #IDX=c(2,4)
idx_max = which.max(vector)
idx_min = which.min(vector)
vector[c(-idx_max,-idx_min)]
letters[1:4] # letters are a vector
# matrix
mat[c(T,F,T,T),] #vector slicing works
mat[1,2]; mat[,3]; mat[3,]; mat[c(1:3,7),-1]
mat[,2,drop=F] #select 2nd column while keeping it as a mat
# slicing DF (basic R syntax)
DF[,] # like matrix or vector above or you can use labels as below because DF are made out of list
DF$colX or DF["colX"]
df[df$port_name %in% c('SMB','Mkt'),]#subset, select rows
# list
L = [as.list(vec)]; L[1]; L[[1]] == 'a' #[i] gets the address, [[i]] gets the element
city = c('Seattle', 'Chicago', 'Boston', 'Houston')
temp = c(78, 74, 50, 104)
list1 = list(name=city,temp=temp)
list1$temp+1; list1[[2]]+1 #access the element
list1[2] #slicing to sub-lists
list1[2] = NULL # delete a sublist
# wrangling ####
setwd("C:/Users/Zhongjin Lu/Dropbox/ML_course/R/Tidy_Data_with_tidyr")
billboard <- readr::read_csv("./data/billboard.csv")
flights = readr::read_csv('./data/flights.csv')
flights2 = separate(flights, route, c("origin", "dest"), sep = "-") #one column to multiple
source('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/R_start.R')
source('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/R_start.R')
library(plyr)
library(dplyr)
library(data.table)
library(ggplot2)
data(mpg)
col_idx = c('year','cyl','cty','hwy')
df = mpg[,col_inx]
df.columns = paste0(rep(V,5),1:5)
paste0(rep(V,5),1:5)
df.columns = paste0(rep("V",5),1:5)
rm(list = ls())
library(plyr)
library(dplyr)
library(data.table)
library(ggplot2)
data(mpg)
col_idx = c('year','cyl','cty','hwy')
df = mpg[,col_inx]
df.columns = paste0(rep("V",5),1:5)
df[,1]
paste0(rep("V",5),1:5)
data(mpg)
col_idx = c('year','cyl','cty','hwy')
df = mpg[,col_inx]
library(plyr)
library(dplyr)
library(data.table)
library(ggplot2)
data(mpg)
col_idx = c('year','cyl','cty','hwy')
df = mpg[,col_inx]
df = mpg[,col_idx]
df.columns = paste0(rep("V",5),1:5)
df[,1]
df[1,]
a=paste0(rep("V",5),1:5)
class(a)
a
df.columns = list(paste0(rep("V",5),1:5))
df.columns
head(df)
df.columns = unlist(paste0(rep("V",5),1:5))
unlist(paste0(rep("V",5),1:5))
class(unlist(paste0(rep("V",5),1:5)))
str(paste0(rep("V",5),1:5))
colnames(df)= paste0(rep("V",5),1:5)
library(plyr)
library(dplyr)
library(data.table)
library(ggplot2)
data(mpg)
col_idx = c('year','cyl','cty','hwy')
df = mpg[,col_idx]
colnames(df)= paste0(rep("V",4),1:4)
source('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/R_start.R')
mpg[1,]
df[1,]
df = mpg[,col_idx]
df[1,]
mpg[1,]
mpg[,.(max_idx=which.max(cty)),by=c(manufacturer)]
mpg=data.table(mpg)
mpg[,.(max_idx:=which.max(cty)),by=manufacturer]
mpg[,.(max_idx=which.max(cty)),by=manufacturer]
mpg[,.I[which.max(cty)],by=manufacturer]
mpg[mpg[,.(max_idx=which.max(cty)),by=manufacturer]$max_idx]
mpg[mpg[,.I[which.max(cty)],by=manufacturer]$V1]
source('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/R_start.R')
source('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/R_start.R')
mpg[mpg[,.I[which.max(cty)],by=manufacturer]$V1] #choose the one with max value #.I[], row number in DT corresponding to each group
mpg[mpg[,.I[which.max(cty)],by=manufacturer]$V1,c("manufacturer","model")] #check
source('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/R_start.R')
source('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/R_start.R')
#Q2 ####
mpg$ratioHVW=mpg$hwy/mpg$displ
mpg$ratioCVE=mpg$cty/mpg$displ
?ave
source('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/R_start.R')
mpg[1,]
mpg[,.(ave_ratioCVE=ave(ratioCVE),ave_ratioCVE=ave(ratioCVE)),
by=.(year,manufacturer)]
mpg[,.(ave_ratioCVE=ave(ratioCVE),ave_ratioCVE=ave(ratioCVE)),
by=.(year,manufacturer)][1,]
mpg[,.(ave_ratioCVE=ave(ratioCVE),ave_ratioCVE=ave(ratioCVE)),
by=.(year,manufacturer)][c(1,.N),]
source('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/R_start.R')
mpg[1,]
mpg$ratioHVE=mpg$hwy/mpg$displ
mpg$ratioCVE=mpg$cty/mpg$displ
mpg[,.(ave_ratioHVE=ave(ratioHVE),ave_ratioCVE=ave(ratioCVE)),
by=.(year,manufacturer)]
mpg[,.I[which.max(cty)],
by=.(year,drv)]
mpg[mpg[,.I[which.max(cty),
by=.(year,drv)]$V1]
mpg[mpg[,.I[which.max(cty),
by=.(year,drv)]$V1,]
mpg[mpg[,.I[which.max(cty)],by=manufacturer]$V1,c("manufacturer","model")] #check
mpg[,.I[which.max(cty)],by=manufacturer]
mpg[,.I[which.max(ratioHVE),by=.(year,drv)]
)
mpg[mpg[,.I[which.max(ratioHVE)],by=.(year,drv)]$V1,]
mpg[c("year","drv")]
mpg[,c("year","drv")]
c("year","drv")-c("year")
mpg[,-("year","drv")]
dplyr::select(mpg,c(-year,-drv))
cbind(mpg[,("year","drv")], dplyr::select(mpg,c(-year,-drv)))
mpg[,("year","drv")]
cbind(mpg[,c("year","drv")], dplyr::select(mpg,c(-year,-drv)))
mpg=cbind(mpg[,c("year","drv")], dplyr::select(mpg,c(-year,-drv)))
mpg[mpg[,.I[which.max(ratioHVE)],by=.(year,drv)]$V1,]
unique(mpg$year)
by = .(year, manufacturer)]
mpg=arrange(mpg, drv,desc(year))
mpg=cbind(mpg[,c("year","drv")], dplyr::select(mpg,c(-year,-drv)))
mpg[mpg[,.I[which.max(ratioHVE)],by=.(year,drv)]$V1,]
unique(mpg$year)
mpg=arrange(mpg, drv,desc(year))
mpg=cbind(mpg[,c("year","drv")], dplyr::select(mpg,c(-year,-drv)))
mpg[mpg[,.I[which.max(ratioHVE)],by=.(year,drv)]$V1,]
unique(mpg$year)
mpg=arrange(mpg, drv,desc(year))
mpg=cbind(mpg[,c("year","drv")], dplyr::select(mpg,c(-year,-drv)))
mpg[mpg[,.I[which.max(ratioHVE)],by=.(year,drv)]$V1,]
colnames(mpg)
mpg[mpg[,.I[which.max(ratioHVE)],by=.(year,drv)]$V1,]
mpg[,.I[which.max(ratioHVE)],by=.(year,drv)]
mpg[,.I[which.max(ratioHVE)],by=.(year,drv)]
dim(mpg)
mpg=data.table(mpg)
mpg[mpg[,.I[which.max(ratioHVE)],by=.(year,drv)]$V1,]
unique(mpg$year)
?read.csv
setwd("C:/Users/Zhongjin Lu/Dropbox/ML_course/HW")
#Q3 ####
df = read.csv(./data/NYC_jobs.csv)
#Q3 ####
df = read.csv("./data/NYC_jobs.csv")
head(df)
View(df)
View(df)
colnames(df)
unique(df$Salary.Frequency)
df = read.csv("./data/NYC_jobs.csv")
df$high_ann=df$Salary.Range.From
unique(df$Salary.Frequency)
df[Salary.Frequency=="Hourly",high_ann]=df[Salary.Frequency=="Hourly",high_ann]*8*5*4*12
df[Salary.Frequency=="Daily",high_ann]=df[Salary.Frequency=="Daily",high_ann]*5*4*12
df = read.csv("./data/NYC_jobs.csv")
df$high_ann=df$Salary.Range.From
df[Salary.Frequency=="Hourly",high_ann]=df[Salary.Frequency=="Hourly",high_ann]*8*5*4*12
df[Salary.Frequency=="Daily",high_ann]=df[Salary.Frequency=="Daily",high_ann]*5*4*12
df[Salary.Frequency=="Hourly",high_ann]
colnames(df)
df[Salary.Frequency=="Hourly","high_ann"]=df[Salary.Frequency=="Hourly","high_ann"]*8*5*4*12
df$high_ann=ifelse(df$Salary.Frequency=="Hourly", df$high_ann, df$high_ann*8*5*4*12 )
df$high_ann=df$Salary.Range.From
unique(df$Salary.Frequency)
df$high_ann=ifelse(df$Salary.Frequency=="Hourly",
df$high_ann*8*5*4*12 , df$high_ann)
df$high_ann=ifelse(df$Salary.Frequency=="Daily",
df$high_ann*5*4*12, df$high_ann )
colnames(df)
df[,.(mean_high=ave("high_ann"),
med_high=median("high_ann")),by = Agency]
source('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/R_start.R')
df = read.csv("./data/NYC_jobs.csv")
colnames(df)
df$high_ann=df$Salary.Range.From
unique(df$Salary.Frequency)
df$high_ann=ifelse(df$Salary.Frequency=="Hourly",
df$high_ann*8*5*4*12 , df$high_ann)
df$high_ann=ifelse(df$Salary.Frequency=="Daily",
df$high_ann*5*4*12, df$high_ann )
df$low_ann=df$Salary.Range.To
df$low_ann=ifelse(df$Salary.Frequency=="Hourly",
df$low_ann*8*5*4*12 , df$low_ann)
df$low_ann=ifelse(df$Salary.Frequency=="Daily",
df$low_ann*5*4*12, df$low_ann )
df[,.(mean_high=ave(high_ann),
med_high=median(high_ann)),by = Agency]
df=data.table(df)
df[,.(mean_high=ave(high_ann),
med_high=median(high_ann)),by = Agency]
df = mpg[,col_idx]
df = mpg[,col_idx]
df = mpg[,col_idx]
library(plyr)
library(dplyr)
library(data.table)
library(ggplot2)
#Q1 ####
data(mpg)
col_idx = c('year','cyl','cty','hwy')
df = mpg[,col_idx]
colnames(df)= paste0(rep("V",4),1:4)
df = mpg[,col_idx]
mean(df$cty,na.rm=T)
mean(df$hwy,na.rm=T)
mpg=data.table(mpg)
mpg[mpg[,.I[which.max(cty)],by=manufacturer]$V1,c("manufacturer","model")] #Q: check
#Q2 ####
mpg$ratioHVE=mpg$hwy/mpg$displ
mpg$ratioCVE=mpg$cty/mpg$displ
mpg[, .(ave_ratioHVE = ave(ratioHVE),
ave_ratioCVE = ave(ratioCVE)),
by = .(year, manufacturer)]
mpg=arrange(mpg, drv,desc(year))
mpg=cbind(mpg[,c("year","drv")], dplyr::select(mpg,c(-year,-drv))) #Q: is it the best way to arranage columns
mpg=data.table(mpg)
mpg[mpg[,.I[which.max(ratioHVE)],by=.(year,drv)]$V1,]
unique(mpg$year)
#Q3 ####
df = read.csv("./data/NYC_jobs.csv")
View(df)
colnames(df)
df$high_ann=df$Salary.Range.From
unique(df$Salary.Frequency)
df$high_ann=ifelse(df$Salary.Frequency=="Hourly",
df$high_ann*8*5*4*12 , df$high_ann)
df$high_ann=ifelse(df$Salary.Frequency=="Daily",
df$high_ann*5*4*12, df$high_ann )
df$low_ann=df$Salary.Range.To
df$low_ann=ifelse(df$Salary.Frequency=="Hourly",
df$low_ann*8*5*4*12 , df$low_ann)
df$low_ann=ifelse(df$Salary.Frequency=="Daily",
df$low_ann*5*4*12, df$low_ann )
df=data.table(df)
df[,.(mean_high=ave(high_ann),
med_high=median(high_ann)),by = Agency]
# df[df$Salary.Frequency=="Hourly","high_ann"]=df[df$Salary.Frequency=="Hourly","high_ann"]*8*5*4*12
# df[df$Salary.Frequency=="Daily","high_ann"]=df[df$Salary.Frequency=="Daily","high_ann"]*5*4*12
df[,lapply(c("high_ann"), mean),by = Agency]
df[,lapply(c("high_ann","low_ann"), mean),by = Agency]
df[c("high_ann","low_ann",'Agency')][,lapply(.SD, mean),by = Agency]
df[c("high_ann","low_ann",'Agency')]
df[,c("high_ann","low_ann",'Agency')][,lapply(.SD, mean),by = Agency]
df[,c("high_ann","low_ann",'Agency')][,lapply(.SD, median),by = Agency]
colnames(df)
df["Business.Title"][1:5]
df["Business.Title"]
df[,"Business.Title"]
colnames(df)
View(df)
df[,c("range","Posting.Type")][,.(sum(.SD)),by=Posting.Type]
df$range=df$high_ann-df$low_ann
df[,c("range","Posting.Type")][,.(sum(.SD)),by=Posting.Type]
df[,c("range","Posting.Type")][,sum(range),by=Posting.Type]
colnames(df)
View(df[1:3,])
df[df[,.I[which.max(range)],by=Civil.Service.Title]$V1]
df[,c("range","Civil.Service.Title")][df[,.I[which.max(range)],by=Civil.Service.Title]$V1]
df = read.csv("./data/NYC_jobs.csv")
colnames(df)
df$high_ann=df$Salary.Range.To
unique(df$Salary.Frequency)
df$high_ann=ifelse(df$Salary.Frequency=="Hourly",
df$high_ann*8*5*4*12 , df$high_ann)
df$high_ann=ifelse(df$Salary.Frequency=="Daily",
df$high_ann*5*4*12, df$high_ann )
df$low_ann=df$Salary.Range.From
df$low_ann=ifelse(df$Salary.Frequency=="Hourly",
df$low_ann*8*5*4*12 , df$low_ann)
df$low_ann=ifelse(df$Salary.Frequency=="Daily",
df$low_ann*5*4*12, df$low_ann )
df=data.table(df)
df[,c("high_ann","low_ann",'Agency')][,lapply(.SD, mean),by = Agency]
df[,c("high_ann","low_ann",'Agency')][,lapply(.SD, median),by = Agency]
df[df[,.I[which.max(low_ann)],by=Agency]$V1] #question unclear
df$range=df$high_ann-df$low_ann
df[,c("range","Posting.Type")][,sum(range),by=Posting.Type]
df[,c("Level",)]
df[,c("high_ann","low_ann",'Agency')][,lapply(.SD, sum),by = Agency]
df[,c("range","Civil.Service.Title")][df[,.I[which.max(range)],by=Civil.Service.Title]$V1]
top_range_by_stitle=df[,c("range","Civil.Service.Title")][df[,.I[which.max(range)],by=Civil.Service.Title]$V1]
arrange(top_range_by_stitle,range)
arrange(top_range_by_stitle,desc(range))
arrange(top_range_by_stitle,desc(range))[1:5,]
source('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/R_start.R')
shiny::runApp('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/Shiny_practice/test')
runApp('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/Shiny_practice/test')
?faithful
runApp('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/Shiny_practice/test')
runApp('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/Shiny_practice/test')
runApp('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/Shiny_practice/test')
runApp('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/Shiny_practice/test')
runApp('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/Shiny_practice/test')
runApp('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/Shiny_practice/test')
runApp('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/Shiny_practice/test')
runApp('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/Shiny_practice/test')
runApp('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/Shiny_practice/test')
shiny:: runExample
shiny:: runExample()
shiny:: runExample("02_text")
?switch
?rock
shiny:: runExample("01_hello")
shiny:: runExample("02_text")
shiny:: runExample("03_reactivity")
shiny:: runExample("")
shiny:: runExample("04_mpg")
shiny:: runExample("05_sliders")
shiny:: runExample("06_tabsets")
shiny:: runExample("07_widgets")
shiny:: runExample("08_html")
shiny:: runExample("09_upload")
shiny:: runExample("10_download")
shiny:: runExample("11_timer")
library("data.table")
library(zoo)
library(plyr)
global_portfolios=read.csv("./data/Global_ex_US_ff5_factors.CSV")
portfolios=read.csv("./data/US_ff5_factors.CSV")
setwd("C:/Users/Zhongjin Lu/Dropbox/ML_course/HW/Shiny_Project/github_version")
library("data.table")
library(zoo)
library(plyr)
global_portfolios=read.csv("./data/Global_ex_US_ff5_factors.CSV")
portfolios=read.csv("./data/US_ff5_factors.CSV")
head(portfolios)
head(global_portfolios)
portfolios = merge(portfolios, global_portfolios, by = "date",all.x = T)
global_portfolios=read.csv("./data/Global_ex_US_ff5_factors.CSV")
portfolios=read.csv("./data/US_ff5_factors.CSV")
head(portfolios)
head(global_portfolios)
global_portfolios = merge(portfolios, global_portfolios, by = "date",all.x = T)
head(global_portfolios)
colnames(global_portfolios)=lapply(colnames(global_portfolios), paste0, "exUS")
head(global_portfolios)
head(global_portfolios,100)
global_portfolios[100,]
global_portfolios[1000,]
global_portfolios[500,]
global_portfolios$RF=NULL
global_portfolios=read.csv("./data/Global_ex_US_ff5_factors.CSV")
portfolios=read.csv("./data/US_ff5_factors.CSV")
head(portfolios)
head(global_portfolios)
global_portfolios$RF=NULL
head(global_portfolios)
global_portfolios=read.csv("./data/Global_ex_US_ff5_factors.CSV")
portfolios=read.csv("./data/US_ff5_factors.CSV")
head(portfolios)
head(global_portfolios)
global_portfolios$RF=NULL
colnames(global_portfolios)=lapply(colnames(global_portfolios), paste0, "exUS")
global_portfolios = merge(portfolios, global_portfolios, by = "date",all.x = T)
?merge
global_portfolios=read.csv("./data/Global_ex_US_ff5_factors.CSV")
portfolios=read.csv("./data/US_ff5_factors.CSV")
head(portfolios)
head(global_portfolios)
global_portfolios$RF=NULL
colnames(global_portfolios)=lapply(colnames(global_portfolios), paste0, ".exUS")
global_portfolios = merge(portfolios, global_portfolios, by.x = "date",by.y="date.exUS",all.x = T)
shiny:: runExample()
shiny:: runExample("02_text")
source('C:/Users/Zhongjin Lu/Dropbox/ML_course/R/ZLU_code/R_start.R')
shiny:: runExample("02_text")
runApp()
runApp()
runApp()
